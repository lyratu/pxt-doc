import{_ as e,c as a,o,a as t}from"./app.8c9f81b3.js";const g=JSON.parse('{"title":"创建 SAMD21 makecode 目标","description":"","frontmatter":{},"headers":[{"level":2,"title":"先决条件","slug":"先决条件","link":"#先决条件","children":[]},{"level":2,"title":"步骤 1: UF2-SAMD21 引导程序","slug":"步骤-1-uf2-samd21-引导程序","link":"#步骤-1-uf2-samd21-引导程序","children":[]},{"level":2,"title":"步骤 2: 创建目标存储库","slug":"步骤-2-创建目标存储库","link":"#步骤-2-创建目标存储库","children":[]},{"level":2,"title":"步骤 3: 看看 pxtarget.json","slug":"步骤-3-看看-pxtarget-json","link":"#步骤-3-看看-pxtarget-json","children":[]},{"level":2,"title":"步骤 4: 添加公共软件包","slug":"步骤-4-添加公共软件包","link":"#步骤-4-添加公共软件包","children":[]},{"level":2,"title":"步骤 5: 设置目标的 libs 文件夹","slug":"步骤-5-设置目标的-libs-文件夹","link":"#步骤-5-设置目标的-libs-文件夹","children":[{"level":3,"title":"添加 pxt-common-packages “core” 库","slug":"添加-pxt-common-packages-core-库","link":"#添加-pxt-common-packages-core-库","children":[]},{"level":3,"title":"添加板的“main”库","slug":"添加板的-main-库","link":"#添加板的-main-库","children":[]},{"level":3,"title":"添加“blocksproject”库","slug":"添加-blocksproject-库","link":"#添加-blocksproject-库","children":[]}]},{"level":2,"title":"步骤 6: 添加 common-sim 库","slug":"步骤-6-添加-common-sim-库","link":"#步骤-6-添加-common-sim-库","children":[]},{"level":2,"title":"步骤 7: 接下来的步骤","slug":"步骤-7-接下来的步骤","link":"#步骤-7-接下来的步骤","children":[]}],"relativePath":"guide/samd21targets.md","lastUpdated":1675251710000}'),r={name:"guide/samd21targets.md"},i=t(`<h1 id="创建-samd21-makecode-目标" tabindex="-1">创建 SAMD21 makecode 目标 <a class="header-anchor" href="#创建-samd21-makecode-目标" aria-hidden="true">#</a></h1><p>本指南介绍了基于 SAMD21 的目标设置和工作的步骤。</p><h2 id="先决条件" tabindex="-1">先决条件 <a class="header-anchor" href="#先决条件" aria-hidden="true">#</a></h2><ol><li>安装<a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node</a>（最低版本 5.7）和 npm（应随 Node 一起提供）</li><li>安装 PXT 命令行： <blockquote><p>npm install -g pxt</p></blockquote></li><li>阅读<a href="/pxt-doc/guide/target-creation">创建目标</a>文档。</li></ol><h2 id="步骤-1-uf2-samd21-引导程序" tabindex="-1">步骤 1: UF2-SAMD21 引导程序 <a class="header-anchor" href="#步骤-1-uf2-samd21-引导程序" aria-hidden="true">#</a></h2><p>在<a href="https://github.com/microsoft/uf2-samd21/pulls" target="_blank" rel="noreferrer">UF2-SAMD21</a> bootloader repo 中创建一个新的 pull 请求，以添加板的配置。<a href="https://github.com/microsoft/uf2-samd21/blob/master/README.md" target="_blank" rel="noreferrer">README</a>提供了有关如何创建配置的详细信息。您可以查看<a href="https://github.com/microsoft/uf2-samd21/blob/master/boards/generic/board_config.h" target="_blank" rel="noreferrer">通用</a>配置以查看示例。</p><h2 id="步骤-2-创建目标存储库" tabindex="-1">步骤 2: 创建目标存储库 <a class="header-anchor" href="#步骤-2-创建目标存储库" aria-hidden="true">#</a></h2><p>克隆<a href="https://github.com/microsoft/pxt-sample" target="_blank" rel="noreferrer">pxt-sample</a>作为创建目标的基础。确保在此回购中运行<code>npm install</code>。您可以通过在根目录中运行<code>pxt serve</code>来为示例编辑器提供服务。</p><h2 id="步骤-3-看看-pxtarget-json" tabindex="-1">步骤 3: 看看 pxtarget.json <a class="header-anchor" href="#步骤-3-看看-pxtarget-json" aria-hidden="true">#</a></h2><p>在你的 repo 中，你需要一个<code>pxtarget.json</code>文件来为你的目标配置 pxt 编辑器。请参阅<a href="/pxt-doc/guide/pxtarget">pxtarget</a>页面以获取有关此文件的文档以及所有可用选项。</p><h2 id="步骤-4-添加公共软件包" tabindex="-1">步骤 4: 添加公共软件包 <a class="header-anchor" href="#步骤-4-添加公共软件包" aria-hidden="true">#</a></h2><p><a href="https://github.com/microsoft/pxt-common-packages" target="_blank" rel="noreferrer">pxt-common-packages</a>是所有 SAMD21 目标通用的 CODAL 代码所在的 repo。运行<code>npm install --save pxt-common-packages</code>在目标 repo（从 pxt 示例构建的新目标）中保存 pxt 通用包，将其添加到目标中。如果您在本地开发库，则可以从 Github 克隆 pxt 通用包 repo 并将其链接为：<code>npm link &lt;path to cloned repo&gt;</code>（如果您在当地链接包，请确保将其添加到<code>package.json</code>中）。</p><h2 id="步骤-5-设置目标的-libs-文件夹" tabindex="-1">步骤 5: 设置目标的 libs 文件夹 <a class="header-anchor" href="#步骤-5-设置目标的-libs-文件夹" aria-hidden="true">#</a></h2><p>目标中的<code>libs</code>文件夹包含在实际设备上运行的代码库。库是 C++和 TypeScript（*.ts）文件的组合，用于定义块编辑器和文本编辑器中可用的 API。要设置目标的 libs 文件夹，请执行以下操作：</p><h3 id="添加-pxt-common-packages-core-库" tabindex="-1">添加 pxt-common-packages “core” 库 <a class="header-anchor" href="#添加-pxt-common-packages-core-库" aria-hidden="true">#</a></h3><p>此步骤用于在 pxt 通用包中配置 “core” 库。您还可以对希望从 pxt 公共包中包含的任何其他库使用以下步骤。</p><ol><li>删除 pxt 示例 repo 中<code>libs\\core</code>的内容。</li><li>创建一个名为 pxt.json 的新文件，其中包含以下内容：</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;additionalFilePath&quot;: &quot;../../node_modules/pxt-common-packages/libs/core&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol><li>配置了文件路径后，添加到此目录中与 pxt-common-packages core 库中的文件同名的任何文件都将覆盖该文件。使用此方法，您可以覆盖 pxt 公共包中的任何文件。</li><li>对 pxt 公共包中的“base”库重复这些步骤。</li></ol><h3 id="添加板的-main-库" tabindex="-1">添加板的“main”库 <a class="header-anchor" href="#添加板的-main-库" aria-hidden="true">#</a></h3><ol><li>在<code>libs</code>文件夹中，创建一个包含板名称的目录。该目录将是您的板的主库，应包含 pxt 通用包中不包含的任何代码。向该文件夹添加一个<code>pxt.json</code>文件，该文件依赖于上一步中创建的“core”库。请参见 pxt-adafruit circuit-playground 中的<a href="https://github.com/microsoft/pxt-adafruit/blob/master/libs/circuit-playground/pxt.json" target="_blank" rel="noreferrer">pxt.json</a>，作为该文件的示例。</li><li>添加一个名为<code>config.ts</code>的文件。该文件用于配置板的引脚。例如，请参见 pxt-adafruit circuit-playground 中的<a href="https://github.com/microsoft/pxt-adafruit/blob/master/libs/circuit-playground/config.ts" target="_blank" rel="noreferrer">config.ts</a>。</li><li>添加另一个名为 <code>device.d.ts</code> 的文件。此文件用于定义 TypeScript 可见的电路板组件。例如，请参见 pxt-adafruit circuit-playground 中的<a href="https://github.com/Microsoft/pxt-adafruit/blob/master/libs/circuit-playground/device.d.ts" target="_blank" rel="noreferrer">device.d.ts</a>。</li><li>确保在步骤 1 中添加的<code>pxt.json</code>中同时添加<code>device.d.ts</code>和<code>config.ts</code></li></ol><h3 id="添加-blocksproject-库" tabindex="-1">添加“blocksproject”库 <a class="header-anchor" href="#添加-blocksproject-库" aria-hidden="true">#</a></h3><p>在 <code>libs</code> 文件夹中，需要一个 <code>blocksproject</code> 库。此库包含用户启动新项目时最初加载到编辑器中的默认或“base”项目。<code>main.blocks</code> 文件包含项目初始块的 XML 定义。现在，您可以保持原样。在这个库的 <code>pxt.json</code> 中，为上一步创建的“main”库添加一个依赖项。</p><h2 id="步骤-6-添加-common-sim-库" tabindex="-1">步骤 6: 添加 common-sim 库 <a class="header-anchor" href="#步骤-6-添加-common-sim-库" aria-hidden="true">#</a></h2><p>对于 pxt 模拟器来模拟 C++中定义的函数，需要这些函数的等效 TypeScript 版本。pxt 通用包的 npm 模块包含一个“common-sim”文件，该文件定义了所有 API 的模拟器实现。要在目标中使用 common-sim：</p><ol><li>在<code>sim\\public\\sim.manifest</code>内部，在<code>CACHE</code>部分下添加一行<code>/sim/common-sim.js</code>。</li><li>在<code>sim\\public\\simulator.html</code>内部，在<code>/sim/sim.js</code>的脚本标记上方添加<code>/sim/common-sim.js</code>的脚本标签。</li><li>在<code>sim\\simulator.ts</code>内部，将<code>/// &lt;reference path=&quot;../built/common-sim.d.ts&quot;/&gt;</code>添加到文件顶部。</li><li>在<code>sim\\simulator.ts</code>内部，修改<code>Board</code>类以实现common-sim的<code>CommonBoard</code>接口。</li></ol><h2 id="步骤-7-接下来的步骤" tabindex="-1">步骤 7: 接下来的步骤 <a class="header-anchor" href="#步骤-7-接下来的步骤" aria-hidden="true">#</a></h2><p>此时，您应该有一个可以生成UF2文件的基本目标。查看以下步骤以进一步定制目标。</p><ol><li>有关如何自定义编辑器外观的详细信息，请参阅<a href="/pxt-doc/guide/theming">主题</a>文档。</li><li>了解如何使用注释注释为目标<a href="/pxt-doc/guide/defining-blocks">定义块</a>。</li><li>将文档添加到编辑器中。了解如何在<a href="https://makecode.com/writing-docs" target="_blank" rel="noreferrer">markdown</a>中编写参考和项目主题。</li></ol>`,29),c=[i];function l(s,d,n,p,m,h){return o(),a("div",null,c)}const b=e(r,[["render",l]]);export{g as __pageData,b as default};
