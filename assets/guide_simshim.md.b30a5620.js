import{_ as s,c as n,o as a,a as l}from"./app.8c9f81b3.js";const C=JSON.parse('{"title":"自动生成库文件","description":"","frontmatter":{},"headers":[{"level":2,"title":"从 C++自动生成","slug":"从-c-自动生成","link":"#从-c-自动生成","children":[]},{"level":2,"title":"从模拟器自动生成","slug":"从模拟器自动生成","link":"#从模拟器自动生成","children":[{"level":3,"title":"函数异步处理","slug":"函数异步处理","link":"#函数异步处理","children":[]},{"level":3,"title":"传统异步处理","slug":"传统异步处理","link":"#传统异步处理","children":[]}]},{"level":2,"title":"模拟器实现","slug":"模拟器实现","link":"#模拟器实现","children":[]},{"level":2,"title":"索引的实例","slug":"索引的实例","link":"#索引的实例","children":[]},{"level":2,"title":"从 TypeScript 配置实例","slug":"从-typescript-配置实例","link":"#从-typescript-配置实例","children":[]}],"relativePath":"guide/simshim.md","lastUpdated":1675251710000}'),p={name:"guide/simshim.md"},o=l(`<h1 id="自动生成库文件" tabindex="-1">自动生成库文件 <a class="header-anchor" href="#自动生成库文件" aria-hidden="true">#</a></h1><p>PXT 用户可见的 API（作为 TypeScript 函数/类或块）公开了 C++库文件（在硬件目标的情况下）和 JavaScript 模拟器（运行时环境）中定义的行为。这些是在目标定义中<code>/libs</code>文件夹下的 TypeScript 文件（通常为 <code>.d.ts</code>）中定义的。让我们称这些为 <strong>shim files</strong>。</p><p><strong>shim files</strong> 中的定义包括以<code>//%</code>开头的 JSDoc 注释和注释。特别是，<code>//%shim=foo:：bar</code> 表示当前函数应该映射到 C++函数 <code>foo:：bar</code>，也映射到模拟器函数 <code>pxsim.foo.bar</code>。</p><p>PXT 可以在硬件目标的情况下从 C++生成 <strong>shim files</strong>，也可以从模拟器源生成填充文件。在这两种情况下，PXT 将复制所有 JSDoc 样式的注释和<code>//%</code>注释，添加 <code>shim=...</code>注释，并适当地映射类型（例如，C++<code>int</code> 类型映射到 <code>number</code>，TypeScript <code>RefAction</code> 映射到<code>（）=&gt;void</code>）。我们将复制的信息称为 API 元数据。</p><h2 id="从-c-自动生成" tabindex="-1">从 C++自动生成 <a class="header-anchor" href="#从-c-自动生成" aria-hidden="true">#</a></h2><p>对于硬件目标，API 元数据应该在 C++中定义，而不是在模拟器中定义。这主要是因为在 C++端调试不匹配比在 JS 端要困难得多。</p><p>构建目标时，根据<code>/libs</code>下的每个包生成 <strong>shims</strong>。<strong>shims files</strong> 称为<code>shims.d.ts</code>和<code>enums.d.ts</code>。 枚举是单独生成的，因此它们可以<code>＜reference…＞</code>来自模拟器源。</p><p>这两个文件都应该在<code>pxt.json</code>的<code>“files”</code>部分列出，我们还建议将它们签入 git。</p><p>PXT 为 C++片段实现了一个简单的解析器。这个解析器不会处理你抛出的所有东西。特别是，它是基于行的，不会很好地接受多行注释（文档注释除外）。要注释掉一段 C++代码，请使用<code>#if 0 .... #endif</code>结束符。</p><p>从 C++到 TypeScript 的<a href="https://makecode.com/cpp2ts" target="_blank" rel="noreferrer">类型映射</a>非常有限。例如，检查<a href="https://github.com/microsoft/pxt-microbit" target="_blank" rel="noreferrer">microbit target</a>。</p><h2 id="从模拟器自动生成" tabindex="-1">从模拟器自动生成 <a class="header-anchor" href="#从模拟器自动生成" aria-hidden="true">#</a></h2><p>这应用于仅针对软件的目标。</p><p><strong>shim file</strong> 名为<code>sims.d.ts</code>，在构建目标时从<code>/sim/*.ts</code>生成。该文件将在目标的<code>“corepkg”</code>中生成。将来，我们可能允许在包之间进行拆分。类似地，对于 C++一代，<code>sims.d.ts</code>应该包含在<code>pxt.json</code>中并签入。</p><p>查看 <a href="https://github.com/microsoft/pxt-sample" target="_blank" rel="noreferrer">sample target</a>。</p><h3 id="函数异步处理" tabindex="-1">函数异步处理 <a class="header-anchor" href="#函数异步处理" aria-hidden="true">#</a></h3><p>名为<code>fooAsync</code>的函数（或方法）将公开为<code>foo</code>。它有望兑现承诺。这将生成<code>//%promise</code>注释，这将使编译器了解此调用约定。</p><h3 id="传统异步处理" tabindex="-1">传统异步处理 <a class="header-anchor" href="#传统异步处理" aria-hidden="true">#</a></h3><p>模拟器函数还可以使用<code>getResume()</code>获取回调函数，然后在函数应该恢复时调用结果函数。在这种情况下，需要包含<code>//% async</code> 注释。</p><h2 id="模拟器实现" tabindex="-1">模拟器实现 <a class="header-anchor" href="#模拟器实现" aria-hidden="true">#</a></h2><p>如果您在包中添加自己的 C++或汇编函数，并且您不能或不想向模拟器中添加相应的函数，则可以提供仅模拟器的实现。例如：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  Writes to the Bluetooth UART service buffer.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//% blockId=bluetooth_uart_write block=&quot;bluetooth uart write %data&quot; blockGap=8</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//% shim=bluetooth::uartWrite</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">uartWrite</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// dummy implementation for simulator</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UART Write: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>请注意<code>shim=</code>注释。在 C++中，您可以得到以下内容：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bluetooth</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//%</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">uartWrite</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">StringData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>当 PXT 看到对带有<code>shim=</code>注释的函数的调用时，它将始终在本机编译中使用该 shim。在模拟器编译中，只有当函数没有主体或空主体时，才会使用<strong>shim</strong>。如果您不希望模拟器实现做任何事情，例如，可以将单个<code>return</code>语句作为主体。</p><h2 id="索引的实例" tabindex="-1">索引的实例 <a class="header-anchor" href="#索引的实例" aria-hidden="true">#</a></h2><p>暴露设备上引脚的典型模式如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DeviceIO</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">DevicePin</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pins</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//% indexedInstanceNS=pins indexedInstanceShim=pins::getPin</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//%</span></span>
<span class="line"><span style="color:#A6ACCD;">    DevicePin </span><span style="color:#F07178;">A0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//%</span></span>
<span class="line"><span style="color:#A6ACCD;">    DevicePin </span><span style="color:#F07178;">A1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pins</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">DeviceIO</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">io</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//%</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">DevicePin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">getPin</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ... add range checking ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">io</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pins</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DevicePinMethods</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//% blockId=device_get_digital_pin block=&quot;digital read|pin %name&quot; blockGap=8</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//% blockNamespace=pins</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">int</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">digitalRead</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">DevicePin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getDigitalValue</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>indexedInstanceShim</code>生成<code>shim=...(no)</code>注释。它们指示将对变量（只读）的访问编译为对具有特定文字参数的指定函数的调用。将自动为<a href="https://makecode.com/defining-blocks#Fixed-Instance-Set" target="_blank" rel="noreferrer">块</a>生成<code>fixedInstance</code>注释。</p><p>名称空间<code>FooMethods</code>被转换为<code>interface Foo</code>。这些通常用于包装不需要引用计数的本机 C++类。因此，您还需要手动添加以下 TypeScript：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DevicePin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// no methods needed, they come from C++</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如果您不这样做，运行时将调用不存在的方法，混乱将占上风（即使您在开始时可能看不到）</p><p>也可以在这样的声明中指定继承：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AnalogPin</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DigitalPin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><h2 id="从-typescript-配置实例" tabindex="-1">从 TypeScript 配置实例 <a class="header-anchor" href="#从-typescript-配置实例" aria-hidden="true">#</a></h2><p>上面的<code>indexedInstanceShim</code>方法在 C++中定义实例集（例如 pin）时工作良好。然而，有时您会希望在 TypeScript 端定义这些，这可能会限制代码大小，并允许在不更改 C++代码的情况下更改定义（从而避免云重新编译）。</p><p>这非常有用，特别是当一个目标中定义了多个板时。<a href="https://makecode.com/targets/board" target="_blank" rel="noreferrer">核心板包</a>至少包含两个配置文件。这里，我们使用<code>device.d.ts</code>和<code>config.ts</code>，但您可以将它们称为其他名称。</p><p>然后，您可以使用以下内容：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// In device.d.ts</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pins</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//% fixedInstance shim=pxt::getPinById(PIN_A0)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">A0</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">PwmPin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//% fixedInstance shim=pxt::getPinById(PIN_A1)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">A1</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">PwmPin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>C++函数<code>pxt::getPinById(int pinId)</code>将查找给定其硬件名称的 pin 对象，如果尚未分配对象，则首先分配该对象。</p><p><code>PIN_A0</code>等的定义位于<code>config</code>命名空间中：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// In config.ts</span></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PIN_A0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">DAL</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PA02</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PIN_A1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">DAL</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PB08</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NUM_NEOPIXELS</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>您还可以配置管脚名称和其他硬件特性，如板载 neopixes 的数量等。</p><p>用户可以使用<code>userconfig</code>命名空间重写常量。例如：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// In main.ts or other user file</span></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">userconfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// My board has PIN_D2 and PIN_D4 swapped!</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PIN_D2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">DAL</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PA08</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PIN_D4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">DAL</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PA14</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这两个都引用 <code>DAL</code> 命名空间中的常量。每个目标通常有一个 <code>dal.d.ts</code> 文件，用于定义 <code>DAL</code> 名称空间，它是从 C++源自动生成的。一旦所有 C++文件都到位，并且您希望强制重新生成 <code>dal.d.ts</code>，请使用 <code>pxt builddaldts</code> 命令。</p><p>对于<code>config</code>（或<code>userconfig</code>）中的每个常量FOO，必须有一个对应的<code>DAL.CFG_FOO</code>，该<code>DAL.CFF_FOO</code>定义了存储配置设置的索引。设置的索引可以是任何32位数字，但它们在目标中应该是唯一的。这些通常在C++头文件中定义：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CFG_PIN_A0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CFG_PIN_A1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">101</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CFG_PIN_A2</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">102</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CFG_NUM_NEOPIXELS</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span></code></pre></div><p>在C++端，使用<code>pxt::getConfig(CFG_PIN_A0)</code>访问设置<code>PIN_A0</code>。</p><p>注释中的参数如<code>shim=pxt::getButtonByPin(PIN_A5,BUTTON_ACTIVE_LOW_PULL_UP)</code>在<code>DAL</code>命名空间中解析，然后在<code>userconfig</code>和<code>config</code>中解析。它们必须解析为整数常量。</p>`,49),e=[o];function t(c,r,i,y,F,d){return a(),n("div",null,e)}const A=s(p,[["render",t]]);export{C as __pageData,A as default};
